import streamlit as st

import pandas as pd

import plotly.graph_objects as go

import numpy as np



# --- Carregar dados ---

@st.cache_data

def carregar_dados():

Â  Â  return pd.read_csv("PreÃ§os Herois.csv")



df = carregar_dados()



st.title("ðŸ“Š Histograma Interativo de PreÃ§os")



# --- Filtros ---

st.sidebar.header("Filtros")



# ServiÃ§o

todos_servicos = sorted(df["servico"].unique())

selecionar_todos_servicos = st.sidebar.checkbox("Selecionar todos os serviÃ§os", value=True)

if selecionar_todos_servicos:

Â  Â  servicos = st.sidebar.multiselect("ServiÃ§o", todos_servicos, default=todos_servicos)

else:

Â  Â  servicos = st.sidebar.multiselect("ServiÃ§o", todos_servicos)



# Estado

todos_estados = sorted(df["Estado"].unique())

selecionar_todos_estados = st.sidebar.checkbox("Selecionar todos os estados", value=True)

if selecionar_todos_estados:

Â  Â  estados = st.sidebar.multiselect("Estado", todos_estados, default=todos_estados)

else:

Â  Â  estados = st.sidebar.multiselect("Estado", todos_estados)



# Cidade

cidades_disponiveis = sorted(df[df["Estado"].isin(estados)]["Cidade"].unique())

selecionar_todas_cidades = st.sidebar.checkbox("Selecionar todas as cidades", value=True)

if selecionar_todas_cidades:

Â  Â  cidades = st.sidebar.multiselect("Cidade", cidades_disponiveis, default=cidades_disponiveis)

else:

Â  Â  cidades = st.sidebar.multiselect("Cidade", cidades_disponiveis)



# --- Filtrar dados ---

df_filtrado = df[

Â  Â  (df["servico"].isin(servicos)) &

Â  Â  (df["Estado"].isin(estados)) &

Â  Â  (df["Cidade"].isin(cidades))

]



# --- Plot ---

st.subheader("DistribuiÃ§Ã£o de PreÃ§os (com filtros aplicados)")



if df_filtrado.empty:

Â  Â  st.warning("Nenhum dado encontrado com os filtros selecionados.")

else:

Â  Â  bin_size = 20

Â  Â  max_price = df_filtrado["price"].max()

Â  Â  bins = np.arange(0, max_price + bin_size, bin_size)



Â  Â  # Calcular histograma

Â  Â  hist_data = []

Â  Â  for serv in df_filtrado["servico"].unique():

Â  Â  Â  Â  df_serv = df_filtrado[df_filtrado["servico"] == serv]

Â  Â  Â  Â  counts, _ = np.histogram(df_serv["price"], bins=bins)

Â  Â  Â  Â  percent = (counts / counts.sum()) * 100

Â  Â  Â  Â  labels = [f"R${bins[i]:.0f} - R${bins[i+1]-1:.0f}" for i in range(len(counts))]



Â  Â  Â  Â  hist_data.append(go.Bar(

Â  Â  Â  Â  Â  Â  x=labels,

Â  Â  Â  Â  Â  Â  y=counts,

Â  Â  Â  Â  Â  Â  name=serv,

Â  Â  Â  Â  Â  Â  hovertemplate="<br>".join([

Â  Â  Â  Â  Â  Â  Â  Â  "ServiÃ§o: " + serv,

Â  Â  Â  Â  Â  Â  Â  Â  "Faixa de preÃ§o: %{x}",

Â  Â  Â  Â  Â  Â  Â  Â  "Quantidade: %{y}",

Â  Â  Â  Â  Â  Â  Â  Â  "Percentual: %{customdata:.1f}%",

Â  Â  Â  Â  Â  Â  ]),

Â  Â  Â  Â  Â  Â  customdata=percent

Â  Â  Â  Â  ))



Â  Â  # MÃ©dia

Â  Â  media = df_filtrado["price"].mean()



Â  Â  layout = go.Layout(

Â  Â  Â  Â  title="DistribuiÃ§Ã£o de PreÃ§os por ServiÃ§o",

Â  Â  Â  Â  xaxis_title="Faixa de PreÃ§o (R$)",

Â  Â  Â  Â  yaxis_title="Quantidade",

Â  Â  Â  Â  barmode="stack",

Â  Â  Â  Â  bargap=0.05,

Â  Â  Â  Â  shapes=[

Â  Â  Â  Â  Â  Â  dict(

Â  Â  Â  Â  Â  Â  Â  Â  type="line",

Â  Â  Â  Â  Â  Â  Â  Â  x0=f"R${int(media // bin_size) * bin_size} - R${int(media // bin_size) * bin_size + bin_size - 1}",

Â  Â  Â  Â  Â  Â  Â  Â  x1=f"R${int(media // bin_size) * bin_size} - R${int(media // bin_size) * bin_size + bin_size - 1}",

Â  Â  Â  Â  Â  Â  Â  Â  y0=0,

Â  Â  Â  Â  Â  Â  Â  Â  y1=max(counts),

Â  Â  Â  Â  Â  Â  Â  Â  line=dict(color="black", dash="dash"),

Â  Â  Â  Â  Â  Â  )

Â  Â  Â  Â  ],

Â  Â  Â  Â  annotations=[

Â  Â  Â  Â  Â  Â  dict(

Â  Â  Â  Â  Â  Â  Â  Â  x=f"R${int(media // bin_size) * bin_size} - R${int(media // bin_size) * bin_size + bin_size - 1}",

Â  Â  Â  Â  Â  Â  Â  Â  y=max(counts),

Â  Â  Â  Â  Â  Â  Â  Â  text=f"MÃ©dia: R${media:.2f}",

Â  Â  Â  Â  Â  Â  Â  Â  showarrow=True,

Â  Â  Â  Â  Â  Â  Â  Â  arrowhead=1

Â  Â  Â  Â  Â  Â  )

Â  Â  Â  Â  ]

Â  Â  )



Â  Â  fig = go.Figure(data=hist_data, layout=layout)



Â  Â  st.plotly_chart(fig, use_container_width=True)
